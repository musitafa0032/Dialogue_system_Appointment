{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","grammar2","a","b","dmMachine","initial","states","init","on","CLICK","welcome","RECOGNISED","target","actions","assign","context","option","recResult","prompt","entry","ENDSPEECH","ask","query","invoke","id","src","event","nluRequest","onDone","data","intent","name","console","log","onError","menu","cond","todo","timer","appointment","who","nomatch","wholeday","confirm_meeting_whole_day","confirm_time","confirmed","fetch","Request","proxyurl","method","headers","body","then","json","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.e8192aaf.chunk.js","sourcesContent":["import { MachineConfig, Machine, send, Action, assign } from \"xstate\";\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } \n} = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Grace\": { person: \"Grace Jane\" },\n    \"Anna\": { person: \"Anna Dean\" },\n    \"Felix\": { person: \"Felix Green\" },\n    \"Tom\": { person: \"Tom Evans\" },\n\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n\t\"on Saturday\": { day: \"Saturday\" },\n\t\"on Sunday\": { day: \"Sunday\" },\n\n\t\"at 5\": { time: \"5:00\" },\n\t\"at 6\": { time: \"6:00\" },\n    \"at 7\": { time: \"7:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" }\n}\n\nconst grammar2: { [index: string]: boolean } = {\n    \"yes of course\": true,\n    \"sure\": true,\n    \"absolutely\": true,\n    \"yes\": true,\n    \"no way\": false,\n    \"no\": false\n}\n\nlet a = grammar2[\"yes\"]\nlet b = grammar2[\"no\"]\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN')\n            },\n        }})\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n   \n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }            \n        },        \n\n        welcome: {\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAndAsk(\"What would you like to do?\")\n        },\n\n\n        query: {\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: 'menu',\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: 'welcome',\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: 'todo', cond: (context) => context.option === 'todo' },\n                    { target: 'timer', cond: (context) => context.option === 'timer' },\n                    { target: 'appointment', cond: (context) => context.option === 'appointment' }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I will help you.`\n                    })),\n        },\n     /*            nomatch: {\n                    entry: say(\"Sorry, I don't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */ \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's make a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's make a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's set an appointment`\n                    }))\n                }}\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n\t\t\t\t\tcond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"wholeday\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`,\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry which day\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        wholeday: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                    target: \"time\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === a),\n\t\ttarget: \"confirm_meeting_whole_day\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, say it more clearly\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n\t},\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. What time is your meeting?`,\n                    \n                    })),\n            on: { ENDSPEECH: \"ask\" }\n                },\n        ask: {\n            entry: listen()\n                },\n        nomatch: {\n            entry: say(\"Sorry what time?\"),\n        on: { ENDSPEECH: \"prompt\" }\n                }\n                }\n        },\n        confirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                    target: \"init\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === a),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                }\n\n\t},\n    confirm_time: {\n        initial: \"prompt\",\n        on:  {\n            RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\n                target: \"who\"\n            },\n    {cond: (context) => (grammar2[context.recResult] === a),\n    target: \"confirmed\"\n    },\n            { target: \".nomatch\" }]\n        },\n        states: {\n            prompt: {\n               entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                })),\n        on: { ENDSPEECH: \"ask\" }\n            },\n    ask: {\n         entry: listen()\n        },\n    nomatch: {\n        entry: say(\"Sorry, I don't understand\"),\n    on: { ENDSPEECH: \"prompt\" }\n           }\n            },\n        },\n    confirmed: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Your appointment has been created!`\n                }))\n            },\n    }\n    }\n    }})\n\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://intents-oyousuf.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n\t\t    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n\t\t    \tprogress: {\n\t\t\t},\t    \t\t\t\t\t\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://intents-oyousuf.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}