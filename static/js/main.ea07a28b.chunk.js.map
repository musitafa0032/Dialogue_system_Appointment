{"version":3,"sources":["dmSearch.ts","index.tsx"],"names":["saySnippet","send","context","type","value","snippet","dmMachine","initial","states","init","on","CLICK","welcome","RECOGNISED","target","actions","assign","query","recResult","prompt","entry","text","_context","ENDSPEECH","ask","promptAndAsk","invoke","id","src","event","duckQuery","fetch","Request","headers","then","data","json","onDone","AbstractText","console","log","onError","answer","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","listen","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.ea07a28b.chunk.js","sourcesContent":["import { MachineConfig, send, assign, Action } from \"xstate\";\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nconst saySnippet: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `${context.snippet}`\n}))\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n\tinitial: 'prompt',\n\tstates: {\n            prompt: {\n\t\tentry: say(prompt),\n\t\ton: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n\t\tentry: send('LISTEN'),\n            },\n\t}})\n}\n\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\nconst duckQuery = (query: string) =>\n    fetch(new Request(proxyUrl+`https://api.duckduckgo.com/?q=${query}&format=json&skip_disambig=1`,\n\t\t      {headers: { 'Origin': 'http://localhost:3000' }})).then(data => data.json());\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\twelcome: {\n\t    on: {\n\t\tRECOGNISED: {\n\t\t    target: 'query',\n\t\t    actions: assign((context) => { return { query: context.recResult } }),\n                }\n            },\n\t    ...promptAndAsk(\"What are you looking for?\")\n\t},\n\tquery: {\n\t    invoke: {\n\t\tid: 'duck',\n                src: (context, event) => duckQuery(context.query),\n                onDone: {\n                    target: 'answer',\n                    actions: [assign((context, event) => { return {snippet: event.data.AbstractText }}),\n\t\t\t      (context:SDSContext, event:any) => console.log(event.data)]\n                },\n\t\tonError: {\n                    target: 'welcome',\n\t\t    actions: (context,event) => console.log(event.data)\n                }\n            }\n\t},\n        answer: {\n\t    entry: saySnippet,\n\t    on: { ENDSPEECH: 'init' }\n\t}\n    }})\n\n\n// S: What are you looking for?\n// U: Gothenburg\n// S: <smth from wikipedia>\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmSearch\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n\t\t    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n\t\t    \tprogress: {\n\t\t\t},\t    \t\t\t\t\t\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}